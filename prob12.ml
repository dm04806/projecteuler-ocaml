(*
  http://projecteuler.net/index.php?section=problems&id=12
  
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
  
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
*)

#use "misc.ml"

module IntSet = Set.Make(struct type t = big_int let compare = compare_big_int end)

let rec lremove i l =
  match l with
    [] -> failwith "lremove out of bounds"
  | hd :: tl ->
      if i = 0 then (hd, tl)
      else lremove (pred i) tl

let combinations f l =
  let rec aux n l acc =
    if n = 0 then f acc
    else
      for i = 0 to List.length l - 1 do
        let elt, l2 = lremove i l in
        aux (pred n) l2 (elt :: acc)
      done in
  for i = 1 to List.length l do
    aux i l []
  done

let prod l =
  List.fold_left mult_big_int unit_big_int l

let num_divisors n =
  let factors = (prime_factors n)
  and set = ref (IntSet.singleton unit_big_int) in
  combinations (fun x -> set := IntSet.add (prod x) !set) factors;
  IntSet.cardinal !set

let _ =
  let rec loop i acc =
    let triangle = add_big_int i acc in
    let num_divs = (num_divisors triangle) in
    if num_divs >= 500 then
      print_endline (string_of_big_int triangle)
    else loop (succ_big_int i) triangle in
  loop unit_big_int zero_big_int
